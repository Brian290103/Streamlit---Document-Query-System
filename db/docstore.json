{"docstore/data": {"a7fbb7c0-a5fd-4fa6-b55f-5e90f91c6ad4": {"__data__": {"id_": "a7fbb7c0-a5fd-4fa6-b55f-5e90f91c6ad4", "embedding": null, "metadata": {"page_label": "1", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24d9e3b9-92ba-4d8b-bbe4-c70c55c9cbe2", "node_type": "4", "metadata": {"page_label": "1", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "6f7ef177788492847210e98e4948ccf4d634dd16ef29f737e8ec46791100547d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n1\n\ud83d\ude89\nCAT SIT In Revision\n(a) Define distributed systems. Describe the \nvarious components of distributed systems.\nA distributed system consists of a group of independent computers or nodes that \ncommunicate and coordinate their actions over a network to achieve a shared objective. \nThese systems are designed to operate together as a unified entity, allowing for resource \nsharing and concurrent task processing, which improves performance, scalability, and fault \ntolerance. \nThe nodes can be situated in the same location or spread out across different geographical \nareas, connected via local or wide area networks.\nComponents of Distributed Systems\nThe architecture of distributed systems can vary widely depending on their specific applications, \nbut several fundamental components are typically included:\n1. Nodes: Nodes are the individual computers or servers that form the distributed system. Each \nnode operates its own applications and services, contributing to the system's overall \nfunctionality. They can be physical machines or virtual instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1084, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a3ac3ef6-b1ee-4498-9296-9c28c4a20956": {"__data__": {"id_": "a3ac3ef6-b1ee-4498-9296-9c28c4a20956", "embedding": null, "metadata": {"page_label": "2", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5c79ba2-bedf-407d-9824-efb668f56525", "node_type": "4", "metadata": {"page_label": "2", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "57d40da5b0250af5ba34c38a4140e5fb509e99f1c070894f200587532acef155", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n2\n2. Network: The network acts as the communication backbone connecting all nodes. It enables \ndata exchange and coordination, allowing the nodes to collaborate effectively.\n3. Middleware: Middleware is a software layer that provides essential services and \nabstractions to developers. It simplifies network communication complexities, enabling \ndifferent nodes with varying hardware and operating systems to interact smoothly.\n4. Shared Data/Database: Distributed systems typically use shared data repositories where \nmultiple nodes can store and access information. This data may be distributed, replicated, or \npartitioned according to the system's architecture.\n5. Distributed Algorithms: These are the protocols and rules that dictate how nodes \ncommunicate and coordinate their activities. Distributed algorithms ensure correct task \nexecution, even amid node failures or unreliable network connections.\n6. System Management Tools: Management tools are vital for monitoring, managing, and \ntroubleshooting distributed systems. They offer features like load balancing, fault tolerance, \nand system configuration management.\n7. Fault Tolerance Mechanisms: These mechanisms enable the system to continue operating \ncorrectly despite individual node failures. Techniques such as data replication and \nredundancy help maintain system functionality during failures.\n8. Transparency Features: Transparency in distributed systems refers to how well the \ncomplexities of the underlying architecture are concealed from users and applications. This \nincludes access transparency (ease of resource access) and failure transparency (the ability \nto recover from failures without user intervention).\nIn summary, distributed systems utilize multiple interconnected components to operate as a \ncohesive unit, providing significant benefits in scalability, performance, and resilience against \nfailures.\n(b) Define the following terms in relation to \ndistributed systems:\n(i) Ubiquitous Computing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2009, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c98b89d4-ef1f-46da-b0b8-1bf3e31cdee8": {"__data__": {"id_": "c98b89d4-ef1f-46da-b0b8-1bf3e31cdee8", "embedding": null, "metadata": {"page_label": "3", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da631b8c-d5ab-4d1e-ae6c-b8aa08f550f1", "node_type": "4", "metadata": {"page_label": "3", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "459958d603712cf803f88955e354aa3fd9a75f6b166a514f72c50165098d600a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n3\nUbiquitous computing involves embedding computing capabilities into everyday objects and \nenvironments, allowing them to communicate and process information effortlessly/ \nseamlessly. \nWithin distributed systems, this idea highlights the availability of computing resources \neverywhere, allowing users to access services and data from any location. \nThe goal of ubiquitous computing is to create a more interconnected and responsive \nenvironment where technology is integrated seamlessly into daily activities, enhancing user \ninteractions with distributed applications.\n(ii) Scalability\nScalability is the capability of a system to manage increased workloads by adding resources \nwithout affecting performance. \nIn distributed systems, scalability can be divided into two categories: horizontal scalability, \nwhich entails adding more nodes (like servers) to the system, and vertical scalability, which \ninvolves enhancing the capacity of current nodes (such as increasing CPU or memory). \nEffective scalability ensures that as demand rises\u2014due to factors like higher data volumes \nor transaction rates\u2014the system can adjust without significant performance loss.\n(iii) Replication\nReplication in distributed systems refers to the process of creating multiple copies of data \nacross various nodes to improve availability (a proactive measure against failure), \nreliability, and performance (access -time). \nBy replicating data, systems can guarantee that if one node fails, others can still provide \naccess to that data. \nThis approach enhances read performance by allowing requests to be fulfilled from several \nlocations and offers fault tolerance by ensuring data persistence across different nodes (How \nCDNs works).\n(iv) Middleware\nMiddleware is a software layer that aids in communication and data management between \ndistinct components of a distributed system.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac382dca-cf07-43c3-bcbf-f959e3e32e48": {"__data__": {"id_": "ac382dca-cf07-43c3-bcbf-f959e3e32e48", "embedding": null, "metadata": {"page_label": "4", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7e4d034-9153-433c-a0e0-97e1dabd1169", "node_type": "4", "metadata": {"page_label": "4", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "54847f3aed716d6a6741b27d1e877fe7997dd11d185782d9675883cf6cba0e45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n4\nIt serves as an intermediary that simplifies the complexities of network interactions and \noffers common services like messaging, authentication, and data management. \nMiddleware allows different systems to collaborate effectively, enabling developers to \nconcentrate on application logic rather than the underlying communication protocols.\n(v) Open Distribution\nOpen distribution refers to a system architecture designed for components to interact based \non open standards and protocols. \nThis strategy fosters interoperability among various systems and platforms, enhancing \nflexibility in integrating multiple technologies. \nOpen distribution encourages cooperation among diverse systems, enabling efficient sharing \nof resources and information while avoiding vendor lock-in.\n(vi) Virtual Organization\nA virtual organization is a network of individuals or entities that temporarily/ permanently \ncome together to accomplish specific goals while remaining independent in their operations. \nIn the realm of distributed systems, virtual organizations utilize shared resources and \ncapabilities across different geographic locations or organizational boundaries. \nThis structure allows for flexible resource allocation and enables participants to collaborate \non projects without the need for permanent integration or restructuring.\nExample:  \nNASA's Virtual Teams: NASA employs virtual organizations for its projects by \nbringing together scientists and engineers from different locations to collaborate on \nmissions. This approach allows NASA to tap into global expertise while managing \ncomplex projects efficiently through digital communication tools\n(c) Distinguish between the following concepts in \ndistributed systems\n(i) Cloud Computing vs. Virtual Machine\nCloud Computing:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0439f31c-c7e0-427b-a424-f0c8e5d9ef62": {"__data__": {"id_": "0439f31c-c7e0-427b-a424-f0c8e5d9ef62", "embedding": null, "metadata": {"page_label": "5", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39bb7d24-aac3-49bf-83e7-45aa82c1f254", "node_type": "4", "metadata": {"page_label": "5", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "fb5fcee94d8150c5252205c5721b9b4a84505f3ac188dc11c36daaa395584d95", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n5\nDefinition: Cloud computing is a service-oriented model that provides on-demand \naccess to a shared pool of computing resources (such as servers, storage, applications, \nand services) over the internet. It allows users to utilize these resources without needing \nto manage the underlying hardware or infrastructure. Moving computing resources to \nthe internet.\nCharacteristics:\nOffers scalability and flexibility, enabling users to adjust resources based on \ndemand. For example Google Drive, one can add more storage on demand.\nServices are typically billed on a pay-as-you-go basis.\nExamples include Infrastructure as a Service (IaaS), Platform as a Service (PaaS), \nand Software as a Service (SaaS).\nVirtual Machine (VM):\nDefinition: A virtual machine is a software emulation of a physical computer that runs \nan operating system and applications just like a physical machine. VMs are created and \nmanaged by a hypervisor, which allocates physical resources to multiple VMs on a \nsingle physical server.\nCharacteristics:\nProvides isolation between different environments, allowing multiple operating \nsystems to run on the same hardware.\nFacilitates resource optimization by consolidating workloads.\nCan be used within cloud environments but can also exist independently on local \nservers.\nIn summary, cloud computing is a broader service model that utilizes virtual machines among \nother technologies to deliver scalable computing resources over the internet.\n(ii) Persistent vs. Transient Objects\nPersistent Objects:\nDefinition: Persistent objects are data entities that remain in existence beyond the \nexecution of the program that created them. They are stored in non-volatile storage,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1718, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01531d4c-875f-45ec-824f-4b6a245e914b": {"__data__": {"id_": "01531d4c-875f-45ec-824f-4b6a245e914b", "embedding": null, "metadata": {"page_label": "6", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2954e6f-c1fe-4136-93c1-742cb22fafa0", "node_type": "4", "metadata": {"page_label": "6", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "ad31e99331f629802aec05c493ac62c4615d8d29bcec3ced15b0116e2e0b3ac9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n6\nsuch as databases or file systems, and can be retrieved later even after the application \nhas terminated.\nExamples:\nA user profile saved in a database after registration.\nFiles stored on disk that can be accessed by different applications over time.\nTransient Objects:\nDefinition: Transient objects exist only during the execution of a program or process. \nOnce the program terminates or the object is no longer needed, it is discarded and \ncannot be retrieved.\nExamples:\nTemporary variables created during a function execution.\nIn-memory data structures used for calculations that do not need to be saved.\nLocal state variables in applications like React and Jetpack Compose\nThe key difference lies in their lifespan; persistent objects are designed for long-term storage \nwhile transient objects are temporary and ephemeral.\n(iii) Message Passing vs. Multithreading\nMessage Passing:\nDefinition: Message passing is a communication method used in distributed systems \nwhere processes or nodes exchange information by sending messages to one another. \nThis approach is common in systems where components may not share memory.\nCharacteristics:\nEnables asynchronous communication between processes.\nCan involve various protocols for message delivery, such as TCP/IP or UDP.\nIdeal for loosely coupled systems where components operate independently.\nMultithreading:\nDefinition: Multithreading is a programming technique that allows multiple threads \n(smaller units of process) to run concurrently within the same application. Threads share", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e514fc59-592e-4e93-b3cb-48d5cbfb86b5": {"__data__": {"id_": "e514fc59-592e-4e93-b3cb-48d5cbfb86b5", "embedding": null, "metadata": {"page_label": "7", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed50b97a-c84d-4a10-8ce2-f7f22121eb04", "node_type": "4", "metadata": {"page_label": "7", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "5bf8d7d385a761bd2bf72d0730bcf7f0b7f7ae3d48e7eb312fad6e3126a3f815", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n7\nthe same memory space but can execute independently.\nCharacteristics:\nFacilitates parallel execution of tasks within a single process.\nImproves application responsiveness and resource utilization by allowing \nbackground tasks to run simultaneously with the main thread.\nRequires careful management of shared resources to avoid issues like race \nconditions.\nIn essence, message passing is focused on inter-process communication across distributed \nsystems, while multithreading pertains to concurrent execution within a single process.\n(d) Explain the various ways of handling failure \nin distributed systems. What does redundancy \nmean?\nHandling failures in distributed systems is critical to maintaining reliability, availability, and \noverall system performance. \nVarious strategies are employed to manage these failures effectively. \nHere are the primary methods for handling failures:\nWays of Handling Failure in Distributed Systems\nProactive Measures Reactive Measures\nFault Detection Recovery Mechanisms\nFault Tolerance Consensus Algorithms\nMonitoring and LoggingFault Masking\nFault Injection Testing\n1. Fault Detection:\nDefinition: The process of identifying and locating faults within the system.\nMethods: Techniques like heartbeat messages (periodic signals from nodes), timeouts \n(triggering an error if a response is not received), and acknowledgments (confirmations", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1403, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08645a6b-02c4-4aff-860a-434cecf86818": {"__data__": {"id_": "08645a6b-02c4-4aff-860a-434cecf86818", "embedding": null, "metadata": {"page_label": "8", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81dd61c7-e37a-4b16-a100-dafe4cb1b57e", "node_type": "4", "metadata": {"page_label": "8", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "0177ccb57e9ca84f6f2032255216c78c85cbca561a56b164f262bd2cde70c631", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n8\nof message receipt) are commonly used to detect faults promptly[1][2].\n2. Fault Tolerance:\nDefinition: The ability of a system to continue functioning correctly even when faults \noccur.\nMechanisms:\nRedundancy: Having extra components or resources that can take over if a primary \ncomponent fails. This includes data replication across multiple nodes to ensure \navailability and consistency[1][2].\nError Correction: Techniques such as checksums or parity bits help identify and \ncorrect data corruption during transmission[2].\nLoad Balancing: Distributing workloads among multiple nodes to prevent any \nsingle node from becoming a bottleneck or point of failure[2].\n3. Recovery Mechanisms:\nDefinition: Processes that restore the system to a correct state after detecting an error.\nExamples:\nRollback Procedures: Reverting to a previous stable state after a failure occurs.\nState Checkpointing: Periodically saving the state of the system so that it can be \nrestored in case of failure[1][3].\n4. Consensus Algorithms:\nThese algorithms ensure that all nodes in a distributed system agree on a common state \nor value, even in the presence of failures or network partitions. Examples include Paxos \nand Raft, which help maintain consistency across distributed databases[2].\n5. Monitoring and Logging:\nContinuous monitoring of system performance and logging errors helps in identifying \nissues before they escalate into failures. This proactive approach allows for timely \ninterventions[3][4].\n6. Fault Masking:\nThis involves hiding the effects of faults from users, allowing the system to operate as if \nno fault has occurred. Techniques include retry strategies and fallback options that", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee8db454-619e-43e9-b847-744cc5e15115": {"__data__": {"id_": "ee8db454-619e-43e9-b847-744cc5e15115", "embedding": null, "metadata": {"page_label": "9", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b718865-f536-4088-9c7d-9f65c0b10fa3", "node_type": "4", "metadata": {"page_label": "9", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "97d027b8c265df9f6a4932cf2e20a90e4ccc70164c27952bbdf2de2d9afe37b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n9\nprovide alternative solutions when a primary operation fails[1][3].\n7. Fault Injection Testing - Pentesting:\nDeliberately introducing faults into the system to test its resilience and recovery \ncapabilities. This helps identify weaknesses and improve fault tolerance mechanisms \nbefore actual failures occur[1][4].\nWhat Does Redundancy Mean?\nRedundancy refers to the inclusion of extra components or systems that are not strictly \nnecessary for functionality but serve as backups in case of failure. In distributed systems, \nredundancy can take various forms:\nData Redundancy: Creating multiple copies of data across different nodes or storage \nlocations to ensure availability even if some nodes fail.\nHardware Redundancy: Using additional hardware components (e.g., servers, network \nlinks) that can take over in case of hardware failure.\nService Redundancy: Implementing multiple instances of services so that if one instance \nfails, others can continue to provide service without interruption.\nOverall, redundancy enhances the reliability and fault tolerance of distributed systems by \nensuring that there are backup resources available to handle failures, thus minimizing downtime \nand maintaining service continuity.\n(e) What are the main goals of distributed \nsystems security?\nThe main goals of distributed systems security focus on protecting the integrity, confidentiality, \nand availability of data and resources in a distributed environment. \nHere are the key objectives:\nMain Goals of Distributed Systems Security\n1. Confidentiality:\nEnsures that sensitive information is accessible only to authorized users. This involves \nprotecting data from unauthorized access during storage and transmission. Techniques \nsuch as encryption are commonly used to maintain confidentiality.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1814, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8255177d-c056-4d13-9a22-9c030b0aa6ba": {"__data__": {"id_": "8255177d-c056-4d13-9a22-9c030b0aa6ba", "embedding": null, "metadata": {"page_label": "10", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6499e943-2cea-4160-8f1e-a6ed823f6a99", "node_type": "4", "metadata": {"page_label": "10", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "bcade664dcad8d0741fbb6bceb3a326ddb2978eda8ae49028f450ee314553403", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n10\n2. Integrity:\nGuarantees that data remains accurate and unaltered during transmission or storage. \nIntegrity checks, such as checksums or hash functions, help detect unauthorized \nmodifications, ensuring that the data received is the same as the data sent.\n3. Availability:\nEnsures that services and resources are accessible when needed. This involves \nimplementing measures to prevent denial-of-service attacks and ensuring redundancy \nand failover mechanisms to maintain service continuity.\n4. Authentication:\nVerifies the identity of users, devices, or services in the distributed system. Strong \nauthentication mechanisms (e.g., passwords, biometrics, cryptographic tokens) are \nessential to ensure that only legitimate entities can access resources.\n5. Access Control:\nRegulates who can access what resources within the system. This includes \nimplementing policies for user permissions and roles to restrict unauthorized access to \nsensitive data and services.\n6. Non-repudiation:\nProvides proof of the origin and delivery of messages or transactions, preventing parties \nfrom denying their involvement. This is crucial for accountability in distributed \ntransactions, where both sender and receiver need assurance of their actions.\n7. Fault Tolerance:\nEnsures that the system can continue operating correctly even in the presence of \nfailures. This involves redundancy, error detection, and recovery mechanisms to handle \nunexpected issues without significant impact on performance.\n8. Data Security:\nProtects data in transit (while being transmitted) and at rest (when stored). This includes \nusing secure communication protocols (like SSL/TLS) to safeguard data against \ninterception or tampering.\n9. Auditability:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2706c7ea-2109-4bec-a25c-b64716bb0745": {"__data__": {"id_": "2706c7ea-2109-4bec-a25c-b64716bb0745", "embedding": null, "metadata": {"page_label": "11", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5824492d-7550-485a-9d2c-97372e67137b", "node_type": "4", "metadata": {"page_label": "11", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "87cb83584136f4d24da57abab7e650fdace481a8edeeaaf416c4ac14db7cb530", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n11\nEnables tracking and logging of activities within the system for security monitoring and \ncompliance purposes. Audit trails help detect anomalies and provide insights into \npotential security breaches.\n(f) Identify and explain the various \ncommunication models in distributed systems.\nIn distributed systems, communication models define how processes or components interact and \nexchange information. \nThese models are essential for ensuring efficient and effective communication in environments \nwhere components may be distributed across different locations. \nHere are the primary communication models used in distributed systems:\n\ud83d\udca11. Client-to-Server Model\n2. Peer-to-Peer Model\n3. Message Passing\n4. Publish and Subscribe\n5. RPC\n6. Streaming Model\n1. Client-Server Model\nDescription: In this model, clients request services or resources from a centralized \nserver. The server processes these requests and sends back the appropriate responses.\nCharacteristics:\nCentralized Control: The server acts as a central point of control, managing \nresources and processing requests.\nScalability Issues: While straightforward, this model can become a bottleneck if too \nmany clients simultaneously request services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ea5df86-3ee6-4d8b-8a7d-a1edc2606745": {"__data__": {"id_": "2ea5df86-3ee6-4d8b-8a7d-a1edc2606745", "embedding": null, "metadata": {"page_label": "12", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a11cbe0d-23e7-4388-ab45-dc3d0707aaf6", "node_type": "4", "metadata": {"page_label": "12", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "9307121008c8558bde20e2f703e6cde4c455f056d338a6b4bcee46f34964f74d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n12\nExamples: Web applications where browsers (clients) request web pages from web \nservers.\n2. Message Passing Model\nDescription: This model involves explicit communication between processes through \nsending and receiving messages. There is no shared memory; instead, processes \ncommunicate by passing messages over the network (end-to-end encryption in \nWhatsApp).\nCharacteristics:\nAsynchronous Communication: Processes can send messages without waiting for \na response, allowing for more flexible interactions.\nPeer-to-Peer Connections: Enables direct communication between processes, \nfacilitating a more decentralized architecture.\nExamples: Distributed applications that use message queues or sockets to exchange \ninformation.\n3. Publish-Subscribe Model\nDescription: In this model, publishers send messages to a topic or channel without \nneeding to know who the subscribers are. Subscribers express interest in specific topics \nand receive messages accordingly.\nCharacteristics:\nDecoupled Communication: Publishers and subscribers operate independently, \nallowing for greater flexibility and scalability.\nEvent-Driven Architecture: Well-suited for applications that require real-time \nupdates, as subscribers receive messages as they are published.\nExamples: News feeds, stock tickers, and IoT applications where devices publish data \nthat interested parties subscribe to.\n4. Peer-to-Peer (P2P) Model\nDescription: In P2P networks, each node (peer) can act as both a client and a server, \nsharing resources directly with other peers without a central authority.\nCharacteristics:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1606, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6e27d73d-6b77-41fa-acfe-d421403cab7f": {"__data__": {"id_": "6e27d73d-6b77-41fa-acfe-d421403cab7f", "embedding": null, "metadata": {"page_label": "13", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cad97e32-213f-4596-88cf-55a6eec1d833", "node_type": "4", "metadata": {"page_label": "13", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "6e91d31c4acc492b96c0fd660e8a0923fee70676ba277f0211f93ce7c64241a7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n13\nDecentralization: Eliminates single points of failure and allows for more resilient \nsystems.\nResource Sharing: Peers can share data, processing power, or storage among \nthemselves.\nExamples: File-sharing networks like BitTorrent and blockchain technologies.\n5. Remote Procedure Call (RPC)\nDescription: RPC abstracts the complexities of message passing by allowing a program \nto execute procedures on remote servers as if they were local calls. The underlying \ncommunication is handled automatically.\nCharacteristics:\nSimplicity: Developers can invoke remote functions using familiar programming \nconstructs without dealing with low-level message handling.\nSynchronous Communication: Typically involves blocking calls where the client \nwaits for the server to respond before continuing execution.\nExamples: APIs that allow applications to call functions hosted on remote servers.\n6. Streaming Model\nDescription: This model focuses on continuous data flow between producers and \nconsumers in real-time. Data is sent in streams rather than discrete messages.\n\ud83d\udca1Streaming Model: Focuses on continuous, real-time data flow, ideal for \napplications needing instantaneous processing.\nDiscrete Messages: Involves sending individual packets of data that can \nbe processed independently, often allowing for batch or delayed \nprocessing.\nCharacteristics:\nReal-Time Processing: Suitable for applications that require immediate processing \nof data as it arrives.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce78949c-dbee-4f85-988f-9b2a6f02a257": {"__data__": {"id_": "ce78949c-dbee-4f85-988f-9b2a6f02a257", "embedding": null, "metadata": {"page_label": "14", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee081cc3-b8f1-4c98-a9b0-7c96a2d47382", "node_type": "4", "metadata": {"page_label": "14", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "faae8fc3a4c9b74e900be7c7f20cf97cb1d24a77dc6729e70c7b6900f535465d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n14\nContinuous Data Flow: Often used in multimedia applications or sensor networks \nwhere data is generated continuously.\nExamples: Video streaming services and real-time analytics platforms.\nConclusion\nEach of these communication models serves different needs within distributed systems, \nproviding various levels of complexity, scalability, and flexibility. The choice of model depends \non the specific requirements of the application being developed, including factors such as \nperformance needs, system architecture, and user interaction patterns.\n(g) Discuss the main challenges in designing \ndistributed systems today.\nDesigning distributed systems presents numerous challenges that must be addressed to ensure \nreliability, performance, and security. \nHere are the main challenges faced in the design and implementation of distributed systems \ntoday:\n1. Heterogeneity\nDescription: Distributed systems often consist of diverse hardware, software, and \nnetwork configurations. This heterogeneity can complicate communication and \ncoordination among nodes.\nChallenges: Ensuring compatibility and seamless interaction between different \ncomponents requires the use of middleware, standard protocols, and service-oriented \narchitectures to manage these differences effectively [1].\n2. Scalability\nDescription: As distributed systems grow in size and complexity, maintaining \nperformance and availability becomes increasingly difficult.\nChallenges: Designing systems that can scale horizontally (adding more nodes) or \nvertically (upgrading existing nodes) without degrading performance is a significant \nchallenge. Load balancing and resource allocation become critical issues [1][4].\n3. Concurrency", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b46bdf25-cb34-49fe-90fe-4676cd260b3d": {"__data__": {"id_": "b46bdf25-cb34-49fe-90fe-4676cd260b3d", "embedding": null, "metadata": {"page_label": "15", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78fc57ed-8920-40cd-80e8-346d134a24b5", "node_type": "4", "metadata": {"page_label": "15", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "2cbd950045beda5b540a7cd8e9dc5f6c80eda677ccc02e2af9ea5f37e45b639c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n15\nDescription: Distributed systems often involve multiple processes accessing shared \nresources simultaneously.\nChallenges: Managing concurrency introduces complexities such as race conditions, \nwhere multiple processes attempt to modify shared data concurrently, potentially leading \nto inconsistent states. Effective concurrency control mechanisms are essential to ensure \ndata integrity [1][3].\n4. Network Latency and Partitioning\nDescription: Communication delays due to network latency can significantly impact \nsystem performance.\nChallenges: Network partitioning can occur when parts of the network become isolated, \ndisrupting communication between nodes. Designing systems that can tolerate such \npartitions while maintaining functionality is crucial [4][5].\n5. Failure Handling\nDescription: Failures can occur at any node in a distributed system, making it essential \nto have robust failure detection and recovery mechanisms.\nChallenges: Identifying and diagnosing failures is complex due to the distributed nature \nof the system. Techniques such as redundancy, replication, and logging are necessary to \nensure continuous operation and data recovery [1][4].\n6. Security\nDescription: The distributed and often heterogeneous nature of these systems poses \nsignificant security challenges.\nChallenges: Ensuring data confidentiality, integrity, and availability while preventing \nunauthorized access requires implementing strong authentication mechanisms, \nencryption, and secure communication protocols [1][4].\n7. Data Consistency\nDescription: Maintaining consistency across distributed data stores is a fundamental \nchallenge.\nChallenges: Different nodes may have varying views of the same data due to latency or \npartitioning. Implementing consistency models (like eventual consistency or strong", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1830, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5557983-c185-4b99-8f81-de9b569e95d9": {"__data__": {"id_": "e5557983-c185-4b99-8f81-de9b569e95d9", "embedding": null, "metadata": {"page_label": "16", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "114257c0-f129-4347-8670-c4945b2da0ad", "node_type": "4", "metadata": {"page_label": "16", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "80b70a04b32058bbfffb12c8bba385a62255e7665b1bfa212b9f9821b9e3a112", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n16\nconsistency) that meet application requirements while balancing performance is essential \n[2][3].\n8. Debugging and Monitoring\nDescription: Debugging distributed systems is inherently more complex than debugging \nsingle-node applications.\nChallenges: Issues such as distributed bugs can spread across multiple nodes, making it \ndifficult to isolate problems. Effective monitoring tools are needed to track system \nperformance and diagnose issues in real-time [4][5].\nConclusion\nThe design of distributed systems involves navigating a landscape filled with challenges related \nto heterogeneity, scalability, concurrency, network issues, failure handling, security, data \nconsistency, and debugging. Addressing these challenges requires careful planning, robust \narchitectural choices, and the implementation of sophisticated techniques to ensure that the \nsystem operates efficiently and reliably under various conditions.\n(h) Discuss the concept of deadlock in distributed \nsystems. What are the main deadlock handling \nstrategies?\nDeadlock in distributed systems refers to a situation where a set of processes becomes unable to \nproceed because each process is waiting for a resource that is held by another process in the \nsame set. \nThis condition creates a cycle of dependencies, preventing any of the involved processes from \nmaking progress. \nIn distributed systems, deadlocks are particularly challenging due to the lack of centralized \ncontrol and the asynchronous nature of communication between processes.\nCharacteristics of Deadlock\nMutual Exclusion: At least one resource must be held in a non-shareable mode; only one \nprocess can use the resource at any given time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1705, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc36f9db-9adb-47ed-8fcb-c82297bb74f8": {"__data__": {"id_": "cc36f9db-9adb-47ed-8fcb-c82297bb74f8", "embedding": null, "metadata": {"page_label": "17", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28940b60-911e-4fc0-a89a-9864e5bbde9e", "node_type": "4", "metadata": {"page_label": "17", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "f7228099fa5fb7de36c06c172680ddbb36d4fd5789610f78f1aa6ce7111552d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n17\nHold and Wait: A process holding at least one resource is waiting to acquire additional \nresources that are currently being held by other processes.\nNo Preemption: Resources cannot be forcibly taken from a process; they must be \nvoluntarily released.\nCircular Wait: There exists a set of processes   such that   is waiting \nfor a resource held by  ,   is waiting for a resource held by  , and so on, with   \nwaiting for a resource held by  .\nMain Deadlock Handling Strategies\n1. Deadlock Prevention:\nDescription: This strategy aims to prevent deadlocks by ensuring that at least one of the \nnecessary conditions for deadlock cannot hold.\nTechniques:\nResource Allocation Protocols: Require processes to request all required resources \nat once before execution begins (prevention of hold and wait).\nOrdering Resources: Impose a strict order for resource acquisition to avoid \ncircular wait situations.\n2. Deadlock Avoidance:\nDescription: Unlike prevention, this strategy allows processes to proceed but requires \ncareful analysis to ensure that the system remains in a safe state.\nTechniques:\nBanker\u2019s Algorithm: Evaluates whether granting a resource request will leave the \nsystem in a safe state by simulating resource allocation and checking for potential \ndeadlocks.\n3. Deadlock Detection:\nDescription: In this approach, the system allows deadlocks to occur but has \nmechanisms in place to detect them when they do.\nTechniques:\nWait-for Graph (WFG): Constructs a graph representing which processes are \nwaiting for which resources. A cycle in this graph indicates the presence of a \nP1 ,P2 ,\u2026,Pn P  \n1\nP  \n2 P  \n2 P  \n3 P  \nn\nP  \n1", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1660, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "667031ef-5eb9-4972-82aa-055ce64377be": {"__data__": {"id_": "667031ef-5eb9-4972-82aa-055ce64377be", "embedding": null, "metadata": {"page_label": "18", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "047ce144-fac4-4d5d-aefe-555f52fe6cac", "node_type": "4", "metadata": {"page_label": "18", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "1745a2f5552581ab5f2a857b5765014c14a688458243f6bd78ff6822ac64c017", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n18\ndeadlock.\nDistributed Algorithms: Use algorithms like edge-chasing or path-pushing to \ndetect deadlocks across distributed nodes.\n4. Deadlock Recovery:\nDescription: Once a deadlock is detected, recovery strategies are employed to resolve \nit.\nTechniques:\nProcess Termination: Abort one or more processes involved in the deadlock to \nbreak the cycle. This can be done based on priority or resource utilization.\nResource Preemption: Temporarily take resources away from some processes and \nallocate them to others until the deadlock is resolved.\n5. Centralized vs. Distributed Detection:\nCentralized detection involves designating one node as responsible for monitoring and \ndetecting deadlocks across the system.\nDistributed detection involves multiple nodes working together to identify deadlocks \nwithout relying on a single point of failure.\nConclusion\nDeadlocks pose significant challenges in distributed systems due to their inherent complexity and \nthe asynchronous nature of process communication. Effective handling strategies\u2014ranging from \nprevention and avoidance to detection and recovery\u2014are essential for maintaining system \nreliability and performance. Understanding these strategies allows system designers and \nadministrators to implement robust solutions that minimize the impact of deadlocks on \ndistributed operations.\n(i) Discuss the various areas of application, \nhighlighting positive impacts, of distributed \ncomputing technology today.\nDistributed computing technology has found applications across various domains, significantly \nimpacting how organizations operate and deliver services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1071b058-baa3-4ea8-953a-99564dc80254": {"__data__": {"id_": "1071b058-baa3-4ea8-953a-99564dc80254", "embedding": null, "metadata": {"page_label": "19", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34024a12-666f-4276-a0c2-cc5906f3506f", "node_type": "4", "metadata": {"page_label": "19", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "beec2867a9b177420456b4380789e6529620b68b218331dc2e584c68fc9fc393", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n19\nHere are some of the key areas of application, along with their positive impacts:\n1. Scientific Research and Simulations\nApplication: Distributed computing is extensively used in scientific research to model \ncomplex systems and conduct simulations that require substantial computational power.\nPositive Impact:\nAccelerates research in fields like climate modeling, genomics, and particle physics \nby enabling researchers to process large datasets quickly. (also get access to large \ndatasets)\nFacilitates collaborative research efforts across institutions, allowing scientists to \nshare resources and data seamlessly.\n2. Healthcare and Life Sciences\nApplication: In healthcare, distributed systems are employed for tasks such as image \nanalysis, drug discovery, and genomic data processing.\nPositive Impact:\nEnhances the speed and accuracy of medical diagnoses by processing large volumes \nof medical images (e.g., MRIs, CT scans).\nSupports personalized medicine by enabling rapid analysis of genetic information, \nleading to better treatment plans for patients.\n3. Big Data Processing and Analytics\nApplication: Distributed computing frameworks (like Hadoop and Spark) are used to \nprocess and analyze vast amounts of data generated from various sources.\nPositive Impact:\nAllows organizations to derive insights from big data, improving decision-making \nprocesses in business operations.\nEnables real-time data processing for applications such as fraud detection in \nfinancial transactions.\n4. Cloud Computing\nApplication: Cloud platforms utilize distributed computing to provide scalable resources \non demand.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1639, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "65690492-3154-4753-ab2f-016f3354e98e": {"__data__": {"id_": "65690492-3154-4753-ab2f-016f3354e98e", "embedding": null, "metadata": {"page_label": "20", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1bbbc30-ea37-4496-aed6-74cdf2dd4423", "node_type": "4", "metadata": {"page_label": "20", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "2c927971c280b96aefde0c6f267e199250343644bd6fc936b7fdb36b261b4f19", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n20\nPositive Impact:\nOffers businesses flexibility and scalability, allowing them to adjust resources based \non workload requirements without significant upfront investments in hardware.\nEnhances collaboration by enabling remote access to applications and data from \nanywhere in the world.\n5. Content Delivery Networks (CDNs)\nApplication: CDNs use distributed computing to deliver content (like videos, images, \nand web pages) efficiently across the globe.\nPositive Impact:\nReduces latency and improves user experience by caching content closer to users' \ngeographic locations.\nIncreases reliability by distributing content across multiple servers, ensuring \navailability even during high traffic periods.\n6. Financial Services\nApplication: Distributed systems support high-frequency trading, risk assessment \nmodels, and secure transaction processing in the financial sector.\nPositive Impact:\nEnables real-time analytics for market predictions and portfolio management, \nimproving investment strategies.\nEnhances security through distributed databases that protect against fraud while \nmanaging high transaction volumes.\n7. Internet of Things (IoT)\nApplication: IoT relies on distributed computing to connect smart devices that \ncommunicate with each other over the internet.\nPositive Impact:\nFacilitates automation and smart decision-making in applications like smart homes, \nindustrial automation, and smart cities.\nImproves efficiency by enabling real-time monitoring and control of devices across \nvarious environments.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1547, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8009740a-cc48-482c-a20c-7a2e07ec8183": {"__data__": {"id_": "8009740a-cc48-482c-a20c-7a2e07ec8183", "embedding": null, "metadata": {"page_label": "21", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83d9d672-3891-4fdc-9c5d-9ba2bfc01b74", "node_type": "4", "metadata": {"page_label": "21", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "5eeee6559f9f9b6552a4c027b5c55ac92bdf1120a9a8b2e0bf649a68b1de0935", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n21\n8. Online Gaming and Virtual Environments\nApplication: Distributed computing powers massively multiplayer online games \n(MMOs) and virtual reality environments. Online Streaming - Streaming Models\nPositive Impact:\nProvides a seamless gaming experience by distributing computational loads across \nmultiple servers.\nEnhances user engagement through real-time interactions in expansive virtual \nworlds.\nConclusion\nThe application of distributed computing technology spans numerous fields, providing \nsignificant benefits such as improved performance, scalability, reliability, and cost-effectiveness. \nBy leveraging the power of distributed systems, organizations can enhance their operational \ncapabilities, drive innovation, and deliver better services to users worldwide.\n(j) Discuss the main communication models in \ndistributed systems.\nDone qsn (e)\n(k) Discuss any the beneficial consequences of \ndistributed computing.\nDistributed computing technology has become increasingly prevalent across various sectors, \nleading to numerous beneficial consequences. Here are some of the key areas where distributed \ncomputing has made a positive impact:\n1. Scalability\nDescription: Distributed systems can easily scale by adding or removing nodes \n(computers) based on demand.\nImpact: This flexibility allows organizations to handle increasing workloads without \nsignificant infrastructure changes. For instance, cloud services can dynamically allocate \nresources to accommodate user traffic spikes, ensuring consistent performance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1553, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f6cdb07-e28b-460d-bb2d-55b0a630a8b2": {"__data__": {"id_": "9f6cdb07-e28b-460d-bb2d-55b0a630a8b2", "embedding": null, "metadata": {"page_label": "22", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b85d2a77-dfe4-4860-98c6-803d8e6b8fa8", "node_type": "4", "metadata": {"page_label": "22", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "55c7d370a63831bb85171dcdd6f1ea73987b67b25ab0a378d04f766dfe5f2fe2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n22\n2. Improved Performance\nDescription: By distributing tasks across multiple machines, distributed computing \nenhances processing speed and efficiency.\nImpact: Complex computations can be executed in parallel, significantly reducing \nexecution time. For example, tasks like data analysis or rendering videos can be \ncompleted much faster when divided among several nodes, leading to quicker insights \nand results.\n3. Fault Tolerance and Reliability (e.g. Redundancy)\nDescription: Distributed systems are designed to be resilient; they can continue \nfunctioning even if some components fail.\nImpact: Redundancy is built into the architecture, allowing for data replication across \nmultiple nodes. This means that if one node fails, others can take over its tasks, ensuring \nhigh availability and minimizing downtime.\n4. Cost-Effectiveness (the aspect of Cloud Computing)\nDescription: Distributed computing often utilizes commodity hardware rather than \nexpensive supercomputers.\nImpact: Organizations can achieve high performance without incurring significant costs \nassociated with high-end infrastructure. This democratizes access to powerful computing \ncapabilities, enabling smaller businesses to leverage advanced technologies.\n5. Enhanced Security\nDescription: Data is distributed across multiple locations rather than centralized in one spot. \n(peer-to-peer models \u21d2  BitTorrents e.t.c applications)\nImpact: This distribution makes it more difficult for malicious actors to access sensitive \ninformation since compromising one node does not grant access to the entire system. \nEnhanced security measures can be implemented across various nodes, further protecting \ndata integrity.\n6. Geographic Flexibility\nDescription: Distributed systems allow for data and services to be located in different \ngeographical regions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1848, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "396a5cd4-bdd1-40e3-813c-93f94ae74edf": {"__data__": {"id_": "396a5cd4-bdd1-40e3-813c-93f94ae74edf", "embedding": null, "metadata": {"page_label": "23", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b44b1cdf-9ad1-4f09-9bd0-a038c94d49e7", "node_type": "4", "metadata": {"page_label": "23", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "69de84e4bfbcc2a48fa40f4fb4657f87f5744d25eb8d19ae7b2d87d7c8a65dd1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n23\nImpact: Organizations can serve global customers more effectively by deploying \nresources closer to users, reducing latency and improving response times. Content \ndelivery networks (CDNs) exemplify this by caching content at various locations \nworldwide.\n7. Data Sharing and Collaboration\nDescription: Distributed systems facilitate easy sharing of data among interconnected \nnodes.\nImpact: This capability supports collaboration among teams spread across different \nlocations, enabling real-time access to shared resources and information. For instance, \ndistributed databases allow multiple users to access and modify data simultaneously \nwithout conflicts.\n8. Increased Efficiency\nDescription: Distributed systems optimize resource utilization by balancing workloads \namong available nodes.\nImpact: By ensuring that no single machine is overloaded while others remain idle, \ndistributed computing improves overall system efficiency. This is particularly beneficial \nin environments with fluctuating workloads.\nConclusion\nThe benefits of distributed computing technology extend across various domains, enhancing \nscalability, performance, reliability, cost-effectiveness, security, geographic flexibility, \ncollaboration, and efficiency. As organizations increasingly adopt distributed systems, they \nunlock new capabilities that drive innovation and improve service delivery in today's fast-paced \ndigital landscape.\n(l) Discuss the concept of transparency in \ndistributed systems.\nTransparency in distributed systems refers to the property that conceals the complexities and \ndetails of the system's distribution from users and application developers. \nThe goal is to present the distributed system as a single cohesive unit rather than a collection of \nindependent components.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1edc582b-87b7-4d89-a5fc-5a087f7d9e08": {"__data__": {"id_": "1edc582b-87b7-4d89-a5fc-5a087f7d9e08", "embedding": null, "metadata": {"page_label": "24", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3900ec3-9ed0-40b6-99ce-0ff995c5a560", "node_type": "4", "metadata": {"page_label": "24", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "09fb18ce658c961047cc39b6f0d51f04718b5685c7fd0a1b88a506bebb0653b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n2 4\nThis simplification enhances usability, allowing users to interact with the system without needing \nto understand its underlying architecture or the location of resources.\nTypes of Transparency\n1. Access Transparency:\nDefinition: Allows users to access local and remote resources using the same \noperations, making it appear as if all resources are local. (think of RPCs)\nExample: In a distributed file system, users can access files on different servers using \nthe same file access commands, regardless of where those files are physically stored.\n2. Location Transparency:\nDefinition: Users do not need to know the physical or network location of resources. \nResources can be moved without affecting how they are accessed.\nExample: A web application that retrieves data from various databases without \nrequiring users to specify which database they are accessing.\n3. Replication Transparency:\nDefinition: Users are unaware of whether resources are replicated across multiple \nlocations. They interact with what appears to be a single resource.\nExample: A distributed database system where data is replicated for fault tolerance; \nusers query data without knowing how many copies exist.\n4. Concurrency Transparency:\nDefinition: Multiple users can access shared resources concurrently without \ninterference, ensuring data consistency.\nExample: In a collaborative document editing application, multiple users can edit a \ndocument simultaneously without causing conflicts.\n5. Failure Transparency:\nDefinition: The system can conceal faults and failures, allowing users to continue their \ntasks despite hardware or software issues.\nExample: A cloud service that automatically reroutes requests to backup servers when a \nprimary server fails, ensuring uninterrupted service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1797, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0bfc9fd3-ce7b-4838-a544-26ed17253795": {"__data__": {"id_": "0bfc9fd3-ce7b-4838-a544-26ed17253795", "embedding": null, "metadata": {"page_label": "25", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81bfca85-d54d-4895-9d94-74bb836a2ff9", "node_type": "4", "metadata": {"page_label": "25", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "47c93af0d3c19d52a2a426228f148e77397771ec5ca1fe861fb5dc9802dacd4d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n25\n6. Migration Transparency:\nDefinition: Users are unaware of the movement of processes or resources within the \nsystem.\nExample: Load balancing in cloud computing where virtual machines may be migrated \nbetween hosts without affecting user experience.\n7. Performance Transparency:\nDefinition: The system can adapt its performance dynamically based on load conditions \nwithout impacting user interactions. (consider load balancing)\nExample: A web application that scales up resources during high traffic periods while \nmaintaining consistent response times for users.\n8. Scaling Transparency:\nDefinition: The ability of the system to grow or shrink in size seamlessly without \naffecting application algorithms or user experience.\nExample: An e-commerce platform that can handle increased traffic during sales events \nwithout requiring changes to its underlying architecture.\nImportance of Transparency\nThe primary goal of transparency in distributed systems is to simplify user interaction by hiding \nthe complexities associated with distribution, such as resource location, replication, and failure \nmanagement. This leads to several benefits:\nEnhanced User Experience: Users can focus on their tasks without needing to understand \nthe intricacies of the underlying system.\nSimplified Application Development: Developers can create applications without worrying \nabout distribution details, allowing them to concentrate on functionality and user interface \ndesign.\nImproved System Reliability and Maintenance: By concealing failures and resource \nmovements, systems can provide a more robust experience while simplifying maintenance \ntasks for administrators.\nConclusion", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1696, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a9dcd88c-3e76-4b52-96ec-94fad2401a06": {"__data__": {"id_": "a9dcd88c-3e76-4b52-96ec-94fad2401a06", "embedding": null, "metadata": {"page_label": "26", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "331290eb-666c-4536-a1ff-157b9ebc9a45", "node_type": "4", "metadata": {"page_label": "26", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "4d4957405ee48b8135f8bd845da4ab98a0671e49bb6be9089cada8473a28b026", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n26\nTransparency is a fundamental aspect of distributed systems that significantly enhances usability \nand efficiency. By implementing various types of transparency, distributed systems can provide a \ncohesive and user-friendly experience while managing the inherent complexities of distribution. \nThis capability is essential for modern applications that rely on distributed architectures for \nscalability, performance, and reliability.\n(m) Discuss the concept of replication control in \ndistributed systems.\nReplication control in distributed systems refers to the mechanisms and protocols that manage \nthe consistency and synchronization of replicated data across multiple nodes. \nAs data is replicated to enhance availability, fault tolerance, and performance, it becomes crucial \nto ensure that all replicas remain consistent with each other. \nThis involves coordinating updates and reads among replicas while minimizing conflicts and \nensuring that users have a coherent view of the data.\nImportance of Replication Control\n1. Consistency Maintenance: Ensures that all replicas reflect the same data state, which is \ncritical for applications that require accurate and up-to-date information.\n2. Fault Tolerance: By maintaining multiple copies of data, replication control helps systems \nrecover from failures without losing critical information.\n3. Performance Improvement: Distributing data across multiple nodes can reduce latency for \nread operations, as requests can be served by the nearest replica.\nTypes of Replication Control Protocols\nReplication control protocols can be broadly categorized based on their approach to managing \nconsistency:\n1. Synchronous Replication:\nDescription: Updates to replicas occur simultaneously, ensuring that all copies are \nconsistent at all times.\nCharacteristics:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1834, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9241652c-334e-47a0-8af7-b2c8f02e41d6": {"__data__": {"id_": "9241652c-334e-47a0-8af7-b2c8f02e41d6", "embedding": null, "metadata": {"page_label": "27", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a3183cb-486e-46f1-b222-2a62164c07d9", "node_type": "4", "metadata": {"page_label": "27", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "817210728962b9274ae13dccef5b7b4ae259895b41100b83cb2758ed180fdba6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n27\nGuarantees strong consistency but may introduce latency due to the need for \ncoordination among replicas.\nTypically requires a consensus mechanism to confirm that all replicas have \nreceived and applied updates before proceeding.\nExample: Quorum-based protocols where a majority of replicas must acknowledge an \nupdate before it is considered committed.\n2. Asynchronous Replication:\nDescription: Updates are propagated to replicas independently and do not require \nimmediate acknowledgment from all copies.\nCharacteristics:\nOffers higher performance and lower latency since operations can proceed without \nwaiting for all replicas to synchronize.\nRisks temporary inconsistencies among replicas, which may lead to conflicts if not \nmanaged properly.\nExample: Eventual consistency models where updates are propagated over time, \nallowing replicas to converge eventually.\n3. Optimistic Replication:\nDescription: Allows concurrent updates on different replicas with the assumption that \nconflicts will be rare.\nCharacteristics:\nConflicts are resolved after updates are made, typically through reconciliation \nprocesses or compensating transactions.\nSuitable for environments with low contention and high availability requirements.\nExample: Systems where users can edit documents independently, with changes \nmerged later.\n4. Pessimistic Replication:\nDescription: Locks are used to prevent concurrent updates on replicas, ensuring that \nonly one update occurs at a time.\nCharacteristics:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1509, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98e99b4a-7ecc-42aa-b728-acf61006104c": {"__data__": {"id_": "98e99b4a-7ecc-42aa-b728-acf61006104c", "embedding": null, "metadata": {"page_label": "28", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdd46024-c777-4823-a482-098f64fe97d2", "node_type": "4", "metadata": {"page_label": "28", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}, "hash": "35b898ea212fff6a61a31c7cb9e42998276bceeabd305ebebb33ab38083d805a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "C A T SIT In R e vision\n28\nGuarantees strong consistency but may lead to reduced availability and \nperformance due to locking mechanisms.\nUseful in scenarios where data integrity is paramount, such as financial \ntransactions.\nExample: Banking systems where account balances must be updated atomically.\nChallenges in Replication Control\n1. Latency and Bandwidth Constraints: Synchronous replication can introduce significant \nlatency, especially in geographically distributed systems with limited bandwidth.\n2. Conflict Resolution: In asynchronous or optimistic replication models, conflicts may arise \nwhen different replicas receive concurrent updates. Effective conflict resolution strategies \nare essential to maintain data integrity.\n3. Scalability: As the number of replicas increases, managing consistency becomes more \ncomplex. Protocols must be designed to scale efficiently without degrading performance.\n4. Network Partitions: In distributed systems, network failures can lead to partitions where \nsome nodes cannot communicate with others. Protocols must handle such scenarios \ngracefully while maintaining consistency.\nConclusion\nReplication control is a critical aspect of distributed systems that ensures data consistency, \navailability, and fault tolerance across multiple nodes. By employing various replication control \nprotocols\u2014ranging from synchronous to asynchronous methods\u2014distributed systems can \nbalance the trade-offs between consistency, performance, and reliability. Understanding these \nmechanisms is essential for designing robust distributed applications that meet user expectations \nand operational requirements.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1644, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"a7fbb7c0-a5fd-4fa6-b55f-5e90f91c6ad4": {"doc_hash": "064f11bd8892a476a642193de544e6251eb85d4418e164d64bcc3a4bf0b3da3c", "ref_doc_id": "24d9e3b9-92ba-4d8b-bbe4-c70c55c9cbe2"}, "a3ac3ef6-b1ee-4498-9296-9c28c4a20956": {"doc_hash": "0dc793e07415e097fac298af189f9cb1bf8e6bbbd60373ebb587808b5ce1c18f", "ref_doc_id": "d5c79ba2-bedf-407d-9824-efb668f56525"}, "c98b89d4-ef1f-46da-b0b8-1bf3e31cdee8": {"doc_hash": "fab380f1f6a39481971054c70caf2b6d40ef6e3b9d2b01f81ff5f171ff20374a", "ref_doc_id": "da631b8c-d5ab-4d1e-ae6c-b8aa08f550f1"}, "ac382dca-cf07-43c3-bcbf-f959e3e32e48": {"doc_hash": "d581967c61ddc4555af0d26781ffc92ffebdbc36187602ee009c0d9bac7779c3", "ref_doc_id": "a7e4d034-9153-433c-a0e0-97e1dabd1169"}, "0439f31c-c7e0-427b-a424-f0c8e5d9ef62": {"doc_hash": "cf37fae7245d24ea41c8f143d6d277631b932f7bb57d44f66e5010fb417ea07e", "ref_doc_id": "39bb7d24-aac3-49bf-83e7-45aa82c1f254"}, "01531d4c-875f-45ec-824f-4b6a245e914b": {"doc_hash": "ef17c46f5412c001257c471d97f90ed7c070b82cd716bd7c1287ccc7661d00f7", "ref_doc_id": "a2954e6f-c1fe-4136-93c1-742cb22fafa0"}, "e514fc59-592e-4e93-b3cb-48d5cbfb86b5": {"doc_hash": "a390c41367281b3d1d13b8251fa6183c87c32b7b0f5e2a5cfa0622327b910a33", "ref_doc_id": "ed50b97a-c84d-4a10-8ce2-f7f22121eb04"}, "08645a6b-02c4-4aff-860a-434cecf86818": {"doc_hash": "3d0c8195e0a3d3dd4d958cced4e9e6abf0ec1fc78db9b609b197d6a53ffeff67", "ref_doc_id": "81dd61c7-e37a-4b16-a100-dafe4cb1b57e"}, "ee8db454-619e-43e9-b847-744cc5e15115": {"doc_hash": "57cd4bf507c0f770d2fe20adabaf7c00b27f215e2c5466e69e850850359bc84f", "ref_doc_id": "1b718865-f536-4088-9c7d-9f65c0b10fa3"}, "8255177d-c056-4d13-9a22-9c030b0aa6ba": {"doc_hash": "f22731c4dd55d0952d40bcbc128dce604fe3e050351ffd830ed2061f6bfaeb99", "ref_doc_id": "6499e943-2cea-4160-8f1e-a6ed823f6a99"}, "2706c7ea-2109-4bec-a25c-b64716bb0745": {"doc_hash": "ede5d0999f2d2a1e884a284508427b9bf7f88122564ad75cabde79df9fa7526a", "ref_doc_id": "5824492d-7550-485a-9d2c-97372e67137b"}, "2ea5df86-3ee6-4d8b-8a7d-a1edc2606745": {"doc_hash": "ac85ebda219fb0482ea1f97ab438977562719b0ca901b30f5b2241907bc30fb2", "ref_doc_id": "a11cbe0d-23e7-4388-ab45-dc3d0707aaf6"}, "6e27d73d-6b77-41fa-acfe-d421403cab7f": {"doc_hash": "1e38a272944fe48f82b94770176c443971053d32d1749853f8301ca3dafefd76", "ref_doc_id": "cad97e32-213f-4596-88cf-55a6eec1d833"}, "ce78949c-dbee-4f85-988f-9b2a6f02a257": {"doc_hash": "7f527611eb6a0ded5daa526b572b4519f2febaed1d99926255e10dc134489a03", "ref_doc_id": "ee081cc3-b8f1-4c98-a9b0-7c96a2d47382"}, "b46bdf25-cb34-49fe-90fe-4676cd260b3d": {"doc_hash": "8c51a1d4cbfe3cf5af72a3f4f287bfc8052f32b2d65f2b75c70c43ddda08ac09", "ref_doc_id": "78fc57ed-8920-40cd-80e8-346d134a24b5"}, "e5557983-c185-4b99-8f81-de9b569e95d9": {"doc_hash": "d1ef98415ac2c8abdc1fe30b89279cac6d9bb4759863ec4ec265576e8987b674", "ref_doc_id": "114257c0-f129-4347-8670-c4945b2da0ad"}, "cc36f9db-9adb-47ed-8fcb-c82297bb74f8": {"doc_hash": "2d1612d8ad1279c80e41b710cab1a4ee4e4c4f508e3a422c3fdda662ff4d8af0", "ref_doc_id": "28940b60-911e-4fc0-a89a-9864e5bbde9e"}, "667031ef-5eb9-4972-82aa-055ce64377be": {"doc_hash": "6921187a53ec0f678da48e310764c629df236d3f0ac9fab0652d12ac274013f1", "ref_doc_id": "047ce144-fac4-4d5d-aefe-555f52fe6cac"}, "1071b058-baa3-4ea8-953a-99564dc80254": {"doc_hash": "b03498e11c3d513ec0d74892da471acfe99f114a90a28f3fdc7885ad8110c90b", "ref_doc_id": "34024a12-666f-4276-a0c2-cc5906f3506f"}, "65690492-3154-4753-ab2f-016f3354e98e": {"doc_hash": "ef38b57b86e52136b08b5b65c759122e23bfb9b06ed868f1195f53d8353993ba", "ref_doc_id": "f1bbbc30-ea37-4496-aed6-74cdf2dd4423"}, "8009740a-cc48-482c-a20c-7a2e07ec8183": {"doc_hash": "92910f71ff6e0b439abd696d6f3c8f3ebbb6a17169b970a489fb3fd01835f94e", "ref_doc_id": "83d9d672-3891-4fdc-9c5d-9ba2bfc01b74"}, "9f6cdb07-e28b-460d-bb2d-55b0a630a8b2": {"doc_hash": "773943fa6da63aa216dd67dd62e4ec00e38d45ad135a242403dd32ab5d671340", "ref_doc_id": "b85d2a77-dfe4-4860-98c6-803d8e6b8fa8"}, "396a5cd4-bdd1-40e3-813c-93f94ae74edf": {"doc_hash": "6a89086efae201f912ac9406089ee32bf0a29ea36034a623ae75d8d7a3d7da73", "ref_doc_id": "b44b1cdf-9ad1-4f09-9bd0-a038c94d49e7"}, "1edc582b-87b7-4d89-a5fc-5a087f7d9e08": {"doc_hash": "35d722b9aed56d3100a3241431bb91b87d97eb6640e0d1deec484b1321d87cf2", "ref_doc_id": "c3900ec3-9ed0-40b6-99ce-0ff995c5a560"}, "0bfc9fd3-ce7b-4838-a544-26ed17253795": {"doc_hash": "d69065ab26902019c064b73dee37270a78ee13f79f270e248811c80c7cbde907", "ref_doc_id": "81bfca85-d54d-4895-9d94-74bb836a2ff9"}, "a9dcd88c-3e76-4b52-96ec-94fad2401a06": {"doc_hash": "60f713f923644f9f194c9389de0760620cb7c025e94a86f7f89efd2be4ce9de3", "ref_doc_id": "331290eb-666c-4536-a1ff-157b9ebc9a45"}, "9241652c-334e-47a0-8af7-b2c8f02e41d6": {"doc_hash": "65a53372dd8d852fac652b950e9c6e3e7a00dcb2b03290d71dfc63e3439fd8f1", "ref_doc_id": "1a3183cb-486e-46f1-b222-2a62164c07d9"}, "98e99b4a-7ecc-42aa-b728-acf61006104c": {"doc_hash": "30d073a8b8db8c7455694059ec9ab36470ff3427d16d574488ba9b963b42e3cd", "ref_doc_id": "cdd46024-c777-4823-a482-098f64fe97d2"}}, "docstore/ref_doc_info": {"24d9e3b9-92ba-4d8b-bbe4-c70c55c9cbe2": {"node_ids": ["a7fbb7c0-a5fd-4fa6-b55f-5e90f91c6ad4"], "metadata": {"page_label": "1", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "d5c79ba2-bedf-407d-9824-efb668f56525": {"node_ids": ["a3ac3ef6-b1ee-4498-9296-9c28c4a20956"], "metadata": {"page_label": "2", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "da631b8c-d5ab-4d1e-ae6c-b8aa08f550f1": {"node_ids": ["c98b89d4-ef1f-46da-b0b8-1bf3e31cdee8"], "metadata": {"page_label": "3", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "a7e4d034-9153-433c-a0e0-97e1dabd1169": {"node_ids": ["ac382dca-cf07-43c3-bcbf-f959e3e32e48"], "metadata": {"page_label": "4", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "39bb7d24-aac3-49bf-83e7-45aa82c1f254": {"node_ids": ["0439f31c-c7e0-427b-a424-f0c8e5d9ef62"], "metadata": {"page_label": "5", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "a2954e6f-c1fe-4136-93c1-742cb22fafa0": {"node_ids": ["01531d4c-875f-45ec-824f-4b6a245e914b"], "metadata": {"page_label": "6", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "ed50b97a-c84d-4a10-8ce2-f7f22121eb04": {"node_ids": ["e514fc59-592e-4e93-b3cb-48d5cbfb86b5"], "metadata": {"page_label": "7", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "81dd61c7-e37a-4b16-a100-dafe4cb1b57e": {"node_ids": ["08645a6b-02c4-4aff-860a-434cecf86818"], "metadata": {"page_label": "8", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "1b718865-f536-4088-9c7d-9f65c0b10fa3": {"node_ids": ["ee8db454-619e-43e9-b847-744cc5e15115"], "metadata": {"page_label": "9", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "6499e943-2cea-4160-8f1e-a6ed823f6a99": {"node_ids": ["8255177d-c056-4d13-9a22-9c030b0aa6ba"], "metadata": {"page_label": "10", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "5824492d-7550-485a-9d2c-97372e67137b": {"node_ids": ["2706c7ea-2109-4bec-a25c-b64716bb0745"], "metadata": {"page_label": "11", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "a11cbe0d-23e7-4388-ab45-dc3d0707aaf6": {"node_ids": ["2ea5df86-3ee6-4d8b-8a7d-a1edc2606745"], "metadata": {"page_label": "12", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "cad97e32-213f-4596-88cf-55a6eec1d833": {"node_ids": ["6e27d73d-6b77-41fa-acfe-d421403cab7f"], "metadata": {"page_label": "13", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "ee081cc3-b8f1-4c98-a9b0-7c96a2d47382": {"node_ids": ["ce78949c-dbee-4f85-988f-9b2a6f02a257"], "metadata": {"page_label": "14", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "78fc57ed-8920-40cd-80e8-346d134a24b5": {"node_ids": ["b46bdf25-cb34-49fe-90fe-4676cd260b3d"], "metadata": {"page_label": "15", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "114257c0-f129-4347-8670-c4945b2da0ad": {"node_ids": ["e5557983-c185-4b99-8f81-de9b569e95d9"], "metadata": {"page_label": "16", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "28940b60-911e-4fc0-a89a-9864e5bbde9e": {"node_ids": ["cc36f9db-9adb-47ed-8fcb-c82297bb74f8"], "metadata": {"page_label": "17", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "047ce144-fac4-4d5d-aefe-555f52fe6cac": {"node_ids": ["667031ef-5eb9-4972-82aa-055ce64377be"], "metadata": {"page_label": "18", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "34024a12-666f-4276-a0c2-cc5906f3506f": {"node_ids": ["1071b058-baa3-4ea8-953a-99564dc80254"], "metadata": {"page_label": "19", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "f1bbbc30-ea37-4496-aed6-74cdf2dd4423": {"node_ids": ["65690492-3154-4753-ab2f-016f3354e98e"], "metadata": {"page_label": "20", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "83d9d672-3891-4fdc-9c5d-9ba2bfc01b74": {"node_ids": ["8009740a-cc48-482c-a20c-7a2e07ec8183"], "metadata": {"page_label": "21", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "b85d2a77-dfe4-4860-98c6-803d8e6b8fa8": {"node_ids": ["9f6cdb07-e28b-460d-bb2d-55b0a630a8b2"], "metadata": {"page_label": "22", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "b44b1cdf-9ad1-4f09-9bd0-a038c94d49e7": {"node_ids": ["396a5cd4-bdd1-40e3-813c-93f94ae74edf"], "metadata": {"page_label": "23", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "c3900ec3-9ed0-40b6-99ce-0ff995c5a560": {"node_ids": ["1edc582b-87b7-4d89-a5fc-5a087f7d9e08"], "metadata": {"page_label": "24", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "81bfca85-d54d-4895-9d94-74bb836a2ff9": {"node_ids": ["0bfc9fd3-ce7b-4838-a544-26ed17253795"], "metadata": {"page_label": "25", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "331290eb-666c-4536-a1ff-157b9ebc9a45": {"node_ids": ["a9dcd88c-3e76-4b52-96ec-94fad2401a06"], "metadata": {"page_label": "26", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "1a3183cb-486e-46f1-b222-2a62164c07d9": {"node_ids": ["9241652c-334e-47a0-8af7-b2c8f02e41d6"], "metadata": {"page_label": "27", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}, "cdd46024-c777-4823-a482-098f64fe97d2": {"node_ids": ["98e99b4a-7ecc-42aa-b728-acf61006104c"], "metadata": {"page_label": "28", "file_name": "ds.pdf", "file_path": "J:\\Codes\\AskPoint Project\\streamlit\\data\\ds.pdf", "file_type": "application/pdf", "file_size": 2053106, "creation_date": "2024-12-28", "last_modified_date": "2024-12-16"}}}}